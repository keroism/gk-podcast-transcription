1
00:00:08,220 --> 00:00:11,331
Rym: It's Monday, June 11th 2018.

2
00:00:11,331 --> 00:00:11,852
Rym: I'm Rym.

3
00:00:11,953 --> 00:00:17,250
Rym: I'm Scott and this is GeekNights tonight containers like Docker or some shit.

4
00:00:18,382 --> 00:00:19,397
Scott: Let's do this.

5
00:00:22,021 --> 00:00:27,417
Rym: So if you follow me on Twitter, you might have noticed that I was talking about axe murder a lot recently.

6
00:00:27,437 --> 00:00:27,497
Rym: Why?

7
00:00:29,846 --> 00:00:33,188
Rym: I ended up Randomly partly because you know, I'm into horror.

8
00:00:33,228 --> 00:00:34,954
Scott: He's not give Rym any axes.

9
00:00:35,736 --> 00:00:36,840
Rym: Ah, do I own an axe?

10
00:00:36,860 --> 00:00:38,087
Rym: I don't think I own an axe.

11
00:00:38,268 --> 00:00:47,268
Rym: But anyway, I noticed something While I was learning more about axe murder and what I noticed Was that axe murder?

12
00:00:47,348 --> 00:00:51,120
Scott: I really hope that all these stories about government spying on Google searches is true.

13
00:00:51,301 --> 00:01:00,440
Rym: I realized that Axe murder is its own category of murder separate from just murder.

14
00:01:00,821 --> 00:01:02,627
Rym: No one says like oh he's a knife murderer.

15
00:01:02,968 --> 00:01:10,229
Rym: people say he's a murderer or they say he's a serial killer Or they say that person is an axe murderer.

16
00:01:10,851 --> 00:01:13,338
Rym: and I wondered why is axe murder its own category?

17
00:01:13,378 --> 00:01:14,140
Scott: because it was a thing.

18
00:01:14,591 --> 00:01:26,930
Rym: Yeah Axe murder from like the slate like 1700s early 1800s until about 1960 was its own kind of murder in the u.s.

19
00:01:27,191 --> 00:01:30,040
Rym: Common enough to have its own colloquial term.

20
00:01:30,321 --> 00:01:32,209
Rym: There's a whole Wikipedia page about it.

21
00:01:32,430 --> 00:01:34,318
Rym: Yeah, like axe murder was a thing.

22
00:01:34,338 --> 00:01:36,206
Rym: I know Do you know why?

23
00:01:36,227 --> 00:01:39,000
Scott: because I really there were people who are fucking axe murderer.

24
00:01:39,161 --> 00:01:39,785
Scott: But why did?

25
00:01:39,906 --> 00:01:41,880
Rym: why are there no longer axe murderers?

26
00:01:42,260 --> 00:01:44,814
Scott: Not a lot of people have axes these days back in the day.

27
00:01:44,855 --> 00:01:45,800
Scott: You'd be chopping wood.

28
00:01:46,383 --> 00:01:47,529
Rym: People don't have axes.

29
00:01:47,670 --> 00:01:49,420
Scott: I mean they do but not like in the old days.

30
00:01:50,461 --> 00:01:55,710
Rym: It's actually that people don't have an excuse to carry axes with them all the time Mm-hmm.

31
00:01:56,096 --> 00:02:04,249
Rym: So To the extent of like there's this one case that I was reading about this pretty I mean It's funny as as funny as axe murder can be.

32
00:02:04,329 --> 00:02:07,200
Rym: it's long enough ago to where I feel like I can talk about this.

33
00:02:07,601 --> 00:02:11,594
Rym: But it sort of really drives home the point that axe murder was such a thing.

34
00:02:11,995 --> 00:02:13,480
Rym: So this family was axe murdered.

35
00:02:14,601 --> 00:02:23,560
Rym: the weird thing about the 1800s in the early 1900s is that when there was an axe murder there would always be multiple likely axe murder suspects.

36
00:02:24,424 --> 00:02:27,820
Rym: So in this case this family got axe murder the people who walk around with axes.

37
00:02:28,322 --> 00:02:31,654
Rym: So I'm gonna list for you very briefly some of the suspects in this case.

38
00:02:31,674 --> 00:02:33,400
Scott: That guy was always in the park stroking his axe.

39
00:02:33,481 --> 00:02:36,580
Rym: Let's see if you can guess which one of these people was the axe murderer.

40
00:02:37,061 --> 00:02:37,643
Scott: All of the above.

41
00:02:37,804 --> 00:02:39,829
Rym: So the only one axe murderer in this case.

42
00:02:40,050 --> 00:02:46,108
Rym: The first suspect was a dude who repeatedly Threatened the family with murder.

43
00:02:46,128 --> 00:02:46,811
Rym: Mm-hmm.

44
00:02:47,273 --> 00:02:53,693
Rym: He was definitely not the axe murderer But he threatened the family that was axe murdered with murder multiple times.

45
00:02:54,034 --> 00:02:59,140
Rym: Okay, right before the murder happened Okay, but he had a stone-cloak cold alibi.

46
00:02:59,822 --> 00:03:09,870
Rym: there was another person who confessed to the axe murder knew a lot of details about the axe murderer and Was weirdly obsessed with axe murder.

47
00:03:10,070 --> 00:03:12,880
Rym: He was a reverend who wandered around studying axe murder.

48
00:03:13,222 --> 00:03:21,096
Rym: Mm-hmm, despite confessing to the axe murder He definitely didn't do it and was just crazy and apparently confessed to a lot of axe murders.

49
00:03:21,297 --> 00:03:24,166
Rym: Mm-hmm But there was another dude.

50
00:03:24,427 --> 00:03:28,420
Scott: you're really making this quiz easy by telling me the right answer before I get to the bottom.

51
00:03:28,781 --> 00:03:33,820
Scott: So like multiple choice, but they already told you which choices are good because all those are like the low-hanging fruit.

52
00:03:34,261 --> 00:03:45,779
Rym: here's a dude who showed up in town the morning after the axe murders and Guy was dressed in a suit, but his feet his pants are all muddy and wet and ruined and he shows up.

53
00:03:46,146 --> 00:03:46,699
Rym: He's a hobo.

54
00:03:46,860 --> 00:03:47,843
Rym: He has an

55
00:03:48,124 --> 00:03:48,345
Scott: axe

56
00:03:49,006 --> 00:04:20,757
Rym: and he asks for a job and he gets a job with like some company that's doing stuff and His co-workers start complaining to the foreman that he sleeps with his axe That he mutters about chopping people's heads off constantly And when the police go to talk to him about potentially being the axe murdering suspect The police the sheriff like walks up behind him and notices that he is just standing alone in the woods holding his axe Muttering about chopping people's heads off and then suddenly flips out and starts swinging the axe at random objects.

57
00:04:21,259 --> 00:04:25,200
Rym: Mm-hmm That guy definitely was not the axe murderer either.

58
00:04:26,181 --> 00:04:34,670
Rym: He's just a hobo who sleeps with his axe and probably axe murdered other people Definitely did not axe murder these people.

59
00:04:34,830 --> 00:04:42,718
Scott: Well, that was obvious because when he came into town all muddy He wasn't all bloody and his axe wasn't bloody and he doesn't seem like someone who could clean things.

60
00:04:42,838 --> 00:04:52,180
Rym: Yeah So there's like two other suspects in this case One of whom was eventually arrested and convicted of axe murder of a bunch of other people.

61
00:04:52,723 --> 00:04:55,279
Rym: But even that one probably didn't do this murder.

62
00:04:56,282 --> 00:04:57,687
Rym: So yeah axe murder is a thing.

63
00:04:57,727 --> 00:05:01,920
Rym: in the end they bring this back to technology and Monday GeekNights.

64
00:05:02,583 --> 00:05:15,599
Rym: The moral of the story is axe murder was a thing Because a huge percentage of murders in that time period were committed via axe Because axes were the most accessible implement of easy murder.

65
00:05:16,580 --> 00:05:23,686
Rym: Also props to all the creepy people who came out of the woodwork in my Twitter to explain to me how hard it is to Kill someone with a knife compared to an axe.

66
00:05:24,108 --> 00:05:25,373
Rym: really glad to that.

67
00:05:25,413 --> 00:05:27,240
Rym: so many people know so much about knife murder.

68
00:05:27,240 --> 00:05:35,340
Scott: Yeah, if you stab someone a bunch of times At least in modern times, especially they got a good chance of surviving Stab them real good.

69
00:05:35,400 --> 00:05:41,720
Scott: if you if you got someone with something big like an axe or Yeti then their chances of survival go way down.

70
00:05:41,801 --> 00:05:49,418
Rym: That's why when you watch a prison movie You see like someone like runs up behind someone who stabs them like 50 times like pip pip pip pip pip pip.

71
00:05:49,459 --> 00:05:57,766
Scott: Yes you Executioners who have to kill people with the low effort because they got to go home to yeah They don't stab someone with a knife, right?

72
00:05:57,786 --> 00:06:01,029
Scott: They got an axe on a big Long wooden thing.

73
00:06:01,049 --> 00:06:02,780
Scott: so or some other implement.

74
00:06:02,860 --> 00:06:10,615
Rym: The only reason axe murder ceased to be a thing in America is because now everybody has guns and all the murders that would have been axes are guns now.

75
00:06:11,057 --> 00:06:19,809
Rym: I feel like we should start calling gun murder gun murder and treat it like this, like its own category that can be dealt with because it's a technology problem.

76
00:06:20,070 --> 00:06:24,240
Rym: Too many people have access to guns and an excuse to carry them around and have them in their homes.

77
00:06:24,341 --> 00:06:25,780
Scott: Why didn't they ban axes back in the day?

78
00:06:26,380 --> 00:06:30,880
Rym: So just people used to keep axes in their houses because everyone needed a goddamn axe.

79
00:06:30,900 --> 00:06:33,000
Scott: You don't walk around with it when you're not going to chop wood.

80
00:06:33,540 --> 00:06:35,040
Scott: Because people were chopping wood all the time.

81
00:06:35,220 --> 00:06:37,520
Scott: I don't carry my hammer around but I'm not going to hammer some nails.

82
00:06:37,800 --> 00:06:40,980
Rym: Someone walking down the street with an axe back then was not that uncommon.

83
00:06:41,841 --> 00:06:46,300
Scott: Yeah, but unless you're going to axe something right now you shouldn't be carrying your axe.

84
00:06:46,360 --> 00:06:51,587
Rym: Yeah, but if you're eating someone's house and decided to kill them, there's probably a bunch of axes all over that house.

85
00:06:52,610 --> 00:06:54,076
Rym: In the very least there's a bunch in the shed.

86
00:06:55,099 --> 00:06:57,000
Rym: Maybe downstairs in the axe room.

87
00:06:57,040 --> 00:06:58,540
Scott: Don't go in the spooky shed with crazy hobo.

88
00:06:59,102 --> 00:07:03,777
Rym: The hobo, so the scarier thing, this is not relevant to technology at all.

89
00:07:04,138 --> 00:07:18,040
Rym: The scariest thing I learned is that there's a pretty solid theory that a huge number of the axe murders in this era were all perpetrated by one axe murdering hobo riding trains around murdering families.

90
00:07:18,341 --> 00:07:18,697
Scott: The muddy one.

91
00:07:19,200 --> 00:07:20,986
Rym: Yeah, not that guy.

92
00:07:21,267 --> 00:07:22,792
Rym: A different axe hobo.

93
00:07:23,414 --> 00:07:26,680
Rym: The lesson there is that we joke from the Simpsons about the stabbing hobos.

94
00:07:27,020 --> 00:07:27,879
Scott: They were stabbing hobos.

95
00:07:28,743 --> 00:07:30,689
Rym: No, there were not stabbing hobos.

96
00:07:30,890 --> 00:07:35,900
Rym: There are almost no stabbing hobos, but there was at least one prolific axe-in-hobo.

97
00:07:37,101 --> 00:07:37,359
Scott: Close enough.

98
00:07:38,040 --> 00:07:39,960
Rym: So you got any news that isn't axe murder?

99
00:07:40,340 --> 00:07:48,746
Scott: There's a lot of tech news and we didn't use it because it was mostly last week when you have a Monday episode and then we forgot a bunch of it, but some of it was so big we didn't forget it.

100
00:07:48,827 --> 00:07:49,514
Scott: So there's the...

101
00:07:50,725 --> 00:07:52,360
Rym: The biggest one, let's start with the GitHub thing.

102
00:07:53,123 --> 00:07:57,479
Scott: So Microsoft bought GitHub, which is really interesting, I guess.

103
00:07:58,800 --> 00:08:07,506
Rym: It's weird because the technology world, I'm seeing the exact opposite take in about equal numbers.

104
00:08:07,566 --> 00:08:12,139
Rym: I see a lot of the like ultra OSS purists freaking out about how Microsoft...

105
00:08:12,560 --> 00:08:24,900
Scott: Well, because the olden days was Microsoft versus Linux and now this Linux for Windows system, whatever that I use at work, the Windows subsystem for Linux.

106
00:08:25,060 --> 00:08:26,820
Rym: The big difference that happened is that Linux...

107
00:08:26,961 --> 00:08:30,539
Scott: And Git is people who wrote Git originally, Linus Torvalds.

108
00:08:30,740 --> 00:08:31,042
Rym: You know what?

109
00:08:31,082 --> 00:08:43,480
Rym: The big thing that changed, though, not to get into the whole debate around this, if it's a good thing, if it's a bad thing, is Microsoft evil, is whatever, is that Linux is in no way a competitor to Windows.

110
00:08:44,059 --> 00:08:44,104
Rym: No.

111
00:08:44,440 --> 00:08:46,540
Rym: They solve different problems at this point.

112
00:08:46,901 --> 00:08:52,998
Rym: There is no future for like consumer Linux on the desktop, except in, yeah.

113
00:08:54,561 --> 00:08:55,214
Scott: Android is Linux.

114
00:08:55,820 --> 00:08:55,880
Rym: Yep.

115
00:08:56,443 --> 00:09:00,038
Rym: Android on the desktop, because for most people...

116
00:09:00,440 --> 00:09:01,819
Scott: There's not a lot of future for the desktop.

117
00:09:02,000 --> 00:09:02,904
Rym: That's the point.

118
00:09:03,146 --> 00:09:06,020
Rym: Android now just exists on the phones, basically.

119
00:09:06,880 --> 00:09:07,318
Scott: But anyway...

120
00:09:07,380 --> 00:09:09,659
Rym: And the phones are the primary PCs for a lot of people.

121
00:09:10,140 --> 00:09:20,780
Scott: The main reason this happened, people don't seem to know, they're just like thinking about the sort of like, you know, Microsoft versus Linux thing, right, is first of all, is anything bad going to happen for actual users?

122
00:09:21,381 --> 00:09:22,127
Scott: Probably not.

123
00:09:22,187 --> 00:09:23,660
Scott: What is Microsoft bought and ruined?

124
00:09:24,201 --> 00:09:24,462
Scott: Yeah.

125
00:09:24,664 --> 00:09:27,539
Scott: They don't have a history of buying and ruining, really, that I can think of.

126
00:09:28,221 --> 00:09:32,939
Scott: But the main reason this happened is because GitHub was not making money.

127
00:09:34,101 --> 00:09:41,479
Scott: GitHub was very important and couldn't die because it was very important and still is, because a lot of shit's hosted there and a lot of companies depend on it.

128
00:09:42,842 --> 00:09:50,240
Rym: And it is shocking how people are incapable of, like, big companies will use GitHub because if they can't deal with managing version control in-house.

129
00:09:50,700 --> 00:09:53,899
Scott: Anyway, but GitHub also direly needed a new CEO.

130
00:09:54,780 --> 00:09:55,235
Rym: Yeah, that's true.

131
00:09:56,401 --> 00:10:04,800
Scott: This just sort of solved all of GitHub's problems, and Microsoft probably made the best deal of the other people who could have bought them and saved them.

132
00:10:05,745 --> 00:10:07,940
Scott: So they just said, OK, you made the best deal.

133
00:10:08,023 --> 00:10:08,519
Scott: We'll go with you.

134
00:10:08,822 --> 00:10:11,860
Rym: I'm pretty confident GitHub is going to just continue to function as it did.

135
00:10:12,302 --> 00:10:14,140
Rym: And if anything, I think it'll just get better.

136
00:10:14,340 --> 00:10:17,540
Scott: And if it somehow turns evil, well, I mean, GitHub isn't Git.

137
00:10:17,680 --> 00:10:25,260
Scott: You can just host your own Git, you can just GitLab, which is perfectly great, or many other alternatives if you just want to, if you need to host Git on a server.

138
00:10:25,841 --> 00:10:35,159
Rym: It's crazy to me to realize that how much of my career has changed over the years that I realized I don't actually know what all my different engineering teams use for their version control or source control.

139
00:10:35,702 --> 00:10:42,520
Scott: In the year twenty eighteen, you should pretty much be using Git or not being, you know, allowed to use a version.

140
00:10:43,420 --> 00:10:44,359
Rym: No mercurial.

141
00:10:44,724 --> 00:10:45,414
Rym: No, let's go.

142
00:10:46,821 --> 00:10:50,340
Rym: No, so in some other news, Apple Apple stuff happened.

143
00:10:50,520 --> 00:10:58,340
Scott: Yeah, this is the Apple Worldwide Developer Conference, which is when they announce historically all of their software things.

144
00:10:58,440 --> 00:11:02,280
Scott: So mostly, you know, iOS updates, iWatch updates, OSX updates.

145
00:11:03,101 --> 00:11:06,460
Scott: Most of the stuff was really the lame stuff that no one gives a shit about.

146
00:11:06,660 --> 00:11:09,400
Scott: Like, we got new animojis and AR shit guys.

147
00:11:09,780 --> 00:11:13,580
Rym: Yeah, I saw very little social media buzz compared to what I usually see.

148
00:11:13,900 --> 00:11:16,300
Scott: Yeah, I mean, you know, it's it's developer stuff.

149
00:11:16,361 --> 00:11:16,502
Scott: Right.

150
00:11:16,522 --> 00:11:18,059
Scott: So the big news is to come out of this.

151
00:11:18,901 --> 00:11:29,300
Scott: Our number one is going to basically be a way to make like a universal app like that's that the same app will go in the iOS app store and the OSX app store.

152
00:11:29,786 --> 00:11:30,619
Scott: And it's the same app.

153
00:11:30,660 --> 00:11:41,020
Scott: If you write the app once in Swift and it, you know, the app looks good on an iPhone, an iPad and a Mac, all the same code, which is sure, why wouldn't you do that?

154
00:11:41,422 --> 00:11:46,319
Scott: And then the other one, the bigger news, at least for nerds, which is great for Monday, actual tech news.

155
00:11:47,621 --> 00:11:59,180
Scott: They have decided to deprecate OpenGL on OSX and their iOS and other platforms, which is a big deal because, well, they never gave a shit about games, really.

156
00:11:59,321 --> 00:12:01,099
Scott: But iOS, I guess they give a shit about games.

157
00:12:01,600 --> 00:12:01,741
Scott: Yeah.

158
00:12:01,761 --> 00:12:11,400
Rym: Well, it's interesting, though, because in terms of Apple, like there's a level of game that is sort of targeted at that platform now and all other PC gaming will be Windows forever.

159
00:12:11,920 --> 00:12:12,041
Scott: Right.

160
00:12:12,061 --> 00:12:12,363
Scott: That's right.

161
00:12:12,383 --> 00:12:13,532
Scott: So you got to understand what like.

162
00:12:13,572 --> 00:12:15,002
Scott: if you don't understand what OpenGL is.

163
00:12:15,062 --> 00:12:15,604
Scott: Right.

164
00:12:15,624 --> 00:12:22,159
Scott: So you have a computer and you want to write some app that does 3D shit and you want that 3D shit to be done by LED GPU.

165
00:12:23,722 --> 00:12:24,143
Scott: Right.

166
00:12:24,163 --> 00:12:31,780
Scott: So you import the OpenGL libraries and there's an API for talking to that GPU and making 3D shit happen.

167
00:12:32,506 --> 00:12:33,540
Scott: And it's standard.

168
00:12:33,680 --> 00:12:39,765
Scott: So if you write at your code to speak to OpenGL libraries, you can go to some other platform.

169
00:12:40,712 --> 00:12:41,660
Scott: Say I write it for Windows.

170
00:12:41,880 --> 00:12:48,598
Scott: I can now go to OSX and I don't have to change too much because there's still OpenGL over there and all my code speaks OpenGL.

171
00:12:48,860 --> 00:12:54,077
Scott: I had to recompile it and I, you know, you're not going to be perfectly good to go, but you're going to be pretty close to good to go.

172
00:12:54,841 --> 00:13:02,520
Scott: And this matters not for someone who's actually making a game, maybe unless it's a very, very intense game where you're micromanaging your GPU bits.

173
00:13:02,982 --> 00:13:05,500
Scott: But if you're writing a game engine, that's going to matter a lot.

174
00:13:05,601 --> 00:13:05,721
Scott: Right.

175
00:13:05,742 --> 00:13:08,320
Scott: Because the game engine is pretty much just speaking OpenGL all the time.

176
00:13:10,540 --> 00:13:18,560
Scott: So Apple on their platform says this thing called Metal, which is a different API for speaking to the GPU, and they think it's better and whatnot.

177
00:13:19,484 --> 00:13:22,480
Scott: Such and such, you know, because it's all customized for Apple.

178
00:13:22,780 --> 00:13:25,619
Rym: Supposedly it's compatible with Intel, AMD and Nvidia GPUs.

179
00:13:26,400 --> 00:13:26,521
Scott: Yeah.

180
00:13:26,561 --> 00:13:36,958
Scott: You know, you know, whether which is irrelevant because you can't really buy your video card with an app, whether whether Metal is is good or not is besides the point because it's not OpenGL.

181
00:13:37,900 --> 00:13:44,223
Scott: So if you write your app to speak Metal, your app ain't running on any other platform without a lot of work.

182
00:13:44,283 --> 00:13:46,753
Scott: It ain't going to run on the switch or the PS4 or the Windows.

183
00:13:48,925 --> 00:13:49,839
Scott: Or pretty much anything else.

184
00:13:50,681 --> 00:13:58,459
Scott: So on the one hand, this could be a lot of work, you know, even if, you know, you're just using a game engine like, say, Unity or something like that.

185
00:13:58,620 --> 00:14:15,672
Scott: Unreal, those people who make those engines now either have to do a shit ton of work to sort this out so that they can build a game on multiple platforms once OpenGL doesn't work on Macs anymore or just not.

186
00:14:15,792 --> 00:14:29,160
Scott: let you you know, you have to write your app twice or basically just make a huge fucking hassle for all game developers, especially since even if those engines, you know, cover all the platforms and, you know, let you build against Metal and against OpenGL and deliver both.

187
00:14:29,763 --> 00:14:31,200
Scott: It's like that's going to be buggy as hell.

188
00:14:31,300 --> 00:14:35,563
Scott: You're going to have bugs that show up on OS X that don't show up on the platform, on the windows.

189
00:14:35,624 --> 00:14:40,837
Scott: And it's basically just creating a nightmare for anyone who works with anything 3D or GPU related.

190
00:14:41,400 --> 00:14:49,709
Rym: What I don't have any stats on because I basically just ignore Apple as a PC gaming platform is how many games using Unity actually run on OS X.

191
00:14:54,360 --> 00:14:55,149
Scott: It's mostly iOS.

192
00:14:55,189 --> 00:14:56,160
Scott: is the real situation.

193
00:14:56,641 --> 00:15:04,940
Scott: Yeah, but for example, I mean, if you want to talk like Hearthstone is actually written on Unity and it runs in every platform, iOS, iPad, OS X and Windows.

194
00:15:05,180 --> 00:15:05,990
Rym: I mean, Unity is fine.

195
00:15:07,081 --> 00:15:11,480
Rym: It'll mostly come down to, I think, games that have a hassle for them to do it.

196
00:15:11,540 --> 00:15:14,200
Scott: And it's going to be bugs, you know, on one way or the other.

197
00:15:14,220 --> 00:15:14,421
Scott: Right.

198
00:15:14,441 --> 00:15:17,440
Scott: Because now you've got these multiple targets instead of just one.

199
00:15:17,841 --> 00:15:18,023
Scott: Yeah.

200
00:15:18,043 --> 00:15:21,695
Rym: But then again, on PC, you always have multiple targets for all the different hardware profiles.

201
00:15:21,796 --> 00:15:22,040
Scott: Yeah.

202
00:15:22,160 --> 00:15:31,263
Rym: Most of those things have been washed away thanks to like, you know, I would argue that most of them have just been washed below where you pay attention to them, but they're still there.

203
00:15:31,504 --> 00:15:41,419
Scott: And the game, the game development, most of those things are actually most of those sort of problems these days are, from what I can tell, they're handled by the Nvidia driver itself.

204
00:15:41,782 --> 00:15:49,020
Scott: This is why every time there's new games that come out, you'll see like the Nvidia and AMD drivers will make patches like we fixed bugs with this game in particular.

205
00:15:49,260 --> 00:15:59,421
Scott: I think that in like I think if you open up the source code of the Nvidia driver, this I think there's like files that are like, if game equals this change GPU settings to that.

206
00:15:59,862 --> 00:16:06,580
Scott: And there's like a huge mega list of like detecting what specific game and software is running and changing things based on.

207
00:16:06,860 --> 00:16:12,279
Rym: I've found most of those are just minor performance improvements, like the game doesn't break or anything.

208
00:16:12,420 --> 00:16:13,003
Rym: Yeah.

209
00:16:13,043 --> 00:16:17,564
Rym: You know, there's a lot of things going on, but they're not as big a deal as you're making them out to know.

210
00:16:17,604 --> 00:16:28,198
Scott: But the people develop when you're developing a big AAA game for the PC, you work with Nvidia slash AMD to work these things out, you know, and things aren't going to match up nicely.

211
00:16:28,540 --> 00:16:37,560
Rym: Well, I mean, I think I think in the end, this doesn't matter that much because big studios either decide if they even target Macs or not.

212
00:16:38,661 --> 00:16:43,583
Scott: And most games, it's not about you keep thinking about Mac, iOS is running the same fucking thing.

213
00:16:43,743 --> 00:16:43,985
Scott: Yeah.

214
00:16:44,045 --> 00:16:47,039
Scott: So iOS is tons of 3D games going on.

215
00:16:47,461 --> 00:16:47,662
Rym: Yeah.

216
00:16:47,682 --> 00:16:51,780
Rym: But I feel like those games are targeting a tablet phone ecosystem.

217
00:16:51,921 --> 00:16:53,060
Rym: And it's a very different business.

218
00:16:53,220 --> 00:16:59,040
Scott: A lot of people write the game once and then they build it to run an iOS and Windows and Android and everything.

219
00:16:59,100 --> 00:17:04,319
Scott: I guess the studios that now that's going to be a way, way more difficult, it's going to be twice as difficult.

220
00:17:05,002 --> 00:17:06,920
Rym: I don't think it's going to be twice as difficult.

221
00:17:06,980 --> 00:17:11,627
Rym: It mostly seems like it's really small shops that are complaining about this and everyone else seems fine with.

222
00:17:11,667 --> 00:17:13,579
Rym: like the articles.

223
00:17:13,921 --> 00:17:17,060
Scott: I haven't seen anyone saying anything positive about it besides Apple.

224
00:17:18,242 --> 00:17:19,940
Rym: I haven't seen people say much of anything about it.

225
00:17:20,000 --> 00:17:22,099
Rym: And these articles are all kind of useless when I was reading them today.

226
00:17:22,280 --> 00:17:32,379
Scott: It's definitely not good for the openness of, you know, if you're on a Mac and suddenly you want to write some code that use your GPU, suddenly you got to go through this, you know, metal closed API business.

227
00:17:32,901 --> 00:17:36,160
Rym: Yeah, but metal will be the default standard for iOS.

228
00:17:37,222 --> 00:17:39,900
Rym: If you're targeting iOS, if you care at all, you'll just support it.

229
00:17:40,040 --> 00:17:44,280
Rym: And that'll be the end of that in some other news, because all the other stuff.

230
00:17:44,380 --> 00:17:44,803
Rym: I mean, I don't.

231
00:17:45,326 --> 00:17:47,320
Rym: Is there any other Apple announcement that you care about?

232
00:17:47,340 --> 00:17:48,379
Rym: Because I don't use any Apple stuff.

233
00:17:48,580 --> 00:17:48,842
Rym: So I don't.

234
00:17:49,204 --> 00:17:51,960
Scott: at this point, most of it is, you know, news that no one cares about.

235
00:17:52,081 --> 00:17:54,279
Scott: Like, oh, these are the features we're going to add to iOS.

236
00:17:54,521 --> 00:17:57,535
Scott: And it's stuff like stuff to help you not be distracted by your phone.

237
00:17:57,555 --> 00:18:01,000
Scott: so much like you can set it to be like, I only want to use Twitter for an hour a day.

238
00:18:01,040 --> 00:18:02,620
Scott: And then your phone after use Twitter for an hour.

239
00:18:02,740 --> 00:18:04,480
Scott: But like, hey, stop using Twitter.

240
00:18:04,640 --> 00:18:05,619
Scott: You used your hour for today.

241
00:18:06,442 --> 00:18:07,679
Rym: Androids had something like that forever.

242
00:18:08,261 --> 00:18:08,484
Scott: Yeah.

243
00:18:09,275 --> 00:18:09,620
Rym: That's that.

244
00:18:09,720 --> 00:18:11,119
Rym: That's really a feature that they announced.

245
00:18:11,380 --> 00:18:11,481
Scott: Yep.

246
00:18:11,682 --> 00:18:14,320
Rym: Because I realized I don't own any Apple devices at this point.

247
00:18:15,000 --> 00:18:15,422
Rym: Not one.

248
00:18:16,005 --> 00:18:18,277
Rym: So I look to you because you're the only you use the Apple.

249
00:18:18,297 --> 00:18:19,383
Rym: you're in the Apple ecosystem.

250
00:18:19,584 --> 00:18:22,057
Scott: I only have an iPhone and I watch an iPad only.

251
00:18:25,922 --> 00:18:27,920
Rym: You know, you say I guess you definitely don't use it.

252
00:18:28,040 --> 00:18:28,651
Scott: I disable that.

253
00:18:28,814 --> 00:18:29,099
Rym: Yeah.

254
00:18:29,680 --> 00:18:33,095
Scott: I just say, well, this hell I do use and it's Siri shortcuts.

255
00:18:34,181 --> 00:18:35,700
Scott: You can program your own Siri shortcut.

256
00:18:35,860 --> 00:18:40,040
Scott: So I can say like, Siri, bite Rym and have that program to do a specific thing.

257
00:18:40,380 --> 00:18:40,521
Rym: Yeah.

258
00:18:40,541 --> 00:18:44,532
Rym: Well, you got to get the Arduino to hook up to some sort of teeth and some way to get them over to me.

259
00:18:44,552 --> 00:18:45,000
Rym: That's right.

260
00:18:45,500 --> 00:18:49,722
Rym: I mean, I would use something like that, but I found it increasingly because I set up OK, Google.

261
00:18:49,762 --> 00:18:52,260
Rym: I've had the ability to do stuff like that for a long time.

262
00:18:53,160 --> 00:18:54,100
Scott: Listen, I'm fine.

263
00:18:54,400 --> 00:18:57,400
Scott: You know, the only problem with it is I do not want to talk out loud.

264
00:18:57,521 --> 00:18:59,020
Scott: It's too much effort to open my mouth.

265
00:18:59,740 --> 00:19:02,880
Rym: I thought I tried to come up with ways where I would use it at home.

266
00:19:02,960 --> 00:19:05,859
Scott: If I had a car, I might turn it on in the car.

267
00:19:06,300 --> 00:19:09,179
Rym: I use OK, Google when I'm driving quite a bit.

268
00:19:09,720 --> 00:19:10,409
Scott: When you drive.

269
00:19:10,734 --> 00:19:11,179
Rym: That's it.

270
00:19:11,361 --> 00:19:12,239
Rym: I don't drive that often.

271
00:19:13,120 --> 00:19:18,351
Rym: When I'm driving like I was in I was in Virginia a little while ago and I rented a car and I drove a lot.

272
00:19:18,392 --> 00:19:18,819
Rym: And you know what?

273
00:19:19,261 --> 00:19:23,840
Rym: I used it to interact with my phone and respond to text messages while I was driving.

274
00:19:24,301 --> 00:19:29,640
Rym: But other than when I'm driving, I don't ever want to talk out loud.

275
00:19:29,821 --> 00:19:35,176
Scott: Any device I had, I can talk to the Apple Watch to respond to Google Hangout while I'm biking, but I don't.

276
00:19:35,580 --> 00:19:36,283
Rym: Well, I would.

277
00:19:36,303 --> 00:19:45,340
Rym: I thought I'd use it like while I'm cooking maybe, but I never need to because at most I have a screen with a recipe up and I never need to interact with any other device while I'm cooking.

278
00:19:45,560 --> 00:19:45,640
Scott: Nope.

279
00:19:46,103 --> 00:19:49,540
Rym: And if I want to change like what music's playing, I just touch my watch.

280
00:19:49,740 --> 00:19:55,347
Rym: Like there's a very brief moment where my hands are covered in like chicken grease where I don't want to touch my watch.

281
00:19:55,609 --> 00:19:57,541
Rym: And as soon as I wash my hands, I can touch my watch again.

282
00:19:58,567 --> 00:20:00,738
Rym: Mostly I just don't want those devices listening to me all the time.

283
00:20:02,201 --> 00:20:05,579
Scott: I mean, turning off Siri won't make them not listen if they want to.

284
00:20:07,020 --> 00:20:09,972
Rym: So one other news is just really funny because it's one of those.

285
00:20:09,992 --> 00:20:12,625
Rym: the news popped up about it a few times.

286
00:20:12,746 --> 00:20:14,940
Rym: And every time it pops up, all I think is, wow, that still exists.

287
00:20:15,360 --> 00:20:22,960
Rym: But as of July 17th, so about a month from now, Yahoo Messenger will actually be dead.

288
00:20:23,821 --> 00:20:30,559
Rym: Apparently, they already shut off chat, but the service is still up until July 17th for people to download their chat histories.

289
00:20:32,362 --> 00:20:34,779
Rym: I'm amazed that anyone was still using Yahoo Messenger.

290
00:20:35,420 --> 00:20:37,917
Rym: I could never think of any use case for it.

291
00:20:39,441 --> 00:20:46,560
Rym: The the husk of Yahoo is slowly being spread out among companies because, as you all know, Flickr was bought.

292
00:20:46,880 --> 00:20:48,579
Rym: So Flickr probably has a real home now.

293
00:20:49,083 --> 00:20:50,679
Rym: I'm going to continue to use Flickr, I think.

294
00:20:51,483 --> 00:20:55,519
Scott: OK, I mean, I'll keep my Flickr alive, but I'm not using it.

295
00:20:55,820 --> 00:20:56,779
Rym: Well, you know what I use it for?

296
00:20:56,940 --> 00:21:04,880
Rym: I don't use it as my photo organizer or anything, but I use it as my primary mechanism to publish in bulk photos I take that other people might want to see.

297
00:21:06,381 --> 00:21:12,180
Rym: It's my online gallery because it is still the best price per function feature.

298
00:21:12,380 --> 00:21:18,439
Rym: Like it's the best service of that kind in the world in terms of how much I pay for it versus how much I get out of it.

299
00:21:19,140 --> 00:21:23,400
Rym: The Lightroom stuff's OK, but it's sort of hard to share with my family and friends.

300
00:21:24,104 --> 00:21:26,240
Rym: They seem more used to Flickr and I just don't want to change.

301
00:21:31,990 --> 00:21:33,990
Rym: But anyway, things of the day.

302
00:21:34,410 --> 00:21:40,133
Rym: So Scott has over the years given me shit when he thinks that my thing of the day is too low hanging fruit.

303
00:21:40,153 --> 00:21:43,768
Rym: And yet this is the second thing of the day in a row.

304
00:21:44,009 --> 00:21:46,370
Rym: Scott has brought to the table that is literally just a tweet.

305
00:21:46,751 --> 00:21:50,890
Scott: I accompanied my previous tweet only thing of the day with another thing.

306
00:21:51,231 --> 00:21:55,592
Rym: Yeah, I'm just saying I'm just pointing out that your thing of the day is a link to a tweet.

307
00:21:55,632 --> 00:21:58,030
Rym: You've set the bar at a particular point.

308
00:21:58,550 --> 00:21:59,710
Scott: You've done tweet things the day before.

309
00:22:00,010 --> 00:22:04,033
Rym: I've done tweet things the day many times and now I will no longer feel ashamed of doing so.

310
00:22:04,517 --> 00:22:06,050
Rym: The point is, this one's pretty good though.

311
00:22:06,130 --> 00:22:11,969
Scott: I got to say, though, the Internet has actually been producing fewer things of the day than it has in the past.

312
00:22:12,070 --> 00:22:12,695
Rym: I got plenty.

313
00:22:12,876 --> 00:22:14,730
Rym: I got a whole queue of weird Internet shit.

314
00:22:14,970 --> 00:22:23,330
Scott: Anyway, so apparently this is I guess I don't know if there's a particular kind of caterpillar or caterpillars in general, but this apparently they react to sound, right?

315
00:22:23,731 --> 00:22:27,410
Scott: It's these small vibrations in the air greatly disturb the caterpillars.

316
00:22:27,733 --> 00:22:29,189
Scott: And if you yell, they shake a lot.

317
00:22:29,691 --> 00:22:32,910
Scott: So when you get a situation, there's a lot of caterpillars altogether.

318
00:22:33,531 --> 00:22:40,328
Scott: You can make noise and then they will all disrupt together and in some sort of audio visualization kind of thing.

319
00:22:40,710 --> 00:22:42,109
Rym: Well, it's funny because a lot of fun.

320
00:22:42,270 --> 00:22:47,909
Rym: I was watching the Vine compilations and that's a thing and other people have noticed this over the years.

321
00:22:48,171 --> 00:22:48,372
Scott: Right.

322
00:22:48,412 --> 00:22:54,530
Scott: So we have, you know, we got some caterpillar rave, somebody yelling at some caterpillars on the stoop and they go, nah.

323
00:22:55,071 --> 00:22:57,710
Rym: I mean, I assume it's just a basic self-defense mechanism.

324
00:22:58,071 --> 00:22:58,372
Scott: I don't know.

325
00:22:58,914 --> 00:23:01,686
Scott: Maybe it's like because the air moves their little hairy bits.

326
00:23:02,188 --> 00:23:03,690
Scott: that makes them confused and they move.

327
00:23:04,070 --> 00:23:04,776
Rym: I don't think they're confused.

328
00:23:04,796 --> 00:23:06,789
Rym: I think they detect it and it's some sort of threat response.

329
00:23:07,210 --> 00:23:08,167
Scott: Caterpillar expert, call us.

330
00:23:08,630 --> 00:23:08,770
Rym: Yeah.

331
00:23:09,393 --> 00:23:22,069
Rym: So my thing of the day that is not the caterpillar thing is if you ever look at old computers, when I say old, I'm talking like you play a cassette tape into it to load a game and then play the game.

332
00:23:22,350 --> 00:23:25,730
Scott: So Apple II and old Atari XT, Commodore.

333
00:23:26,330 --> 00:23:28,904
Rym: There were these loading bars or loading bands.

334
00:23:28,944 --> 00:23:30,050
Rym: you'd see it back in the day.

335
00:23:30,414 --> 00:23:31,690
Rym: And I remember a lot of things doing this.

336
00:23:31,810 --> 00:23:36,452
Rym: Basically, you'd see these bars just sort of appearing on the screen while the game was loading.

337
00:23:37,074 --> 00:23:41,252
Scott: And they just happen that eventually those computers don't have a lot of hardware in them.

338
00:23:41,272 --> 00:23:47,050
Scott: So the probably memory or registers that are shared between the video and the loading mechanism.

339
00:23:47,211 --> 00:23:50,450
Scott: So probably like while you're loading, you don't need to show anything on the screen.

340
00:23:50,530 --> 00:23:54,470
Scott: So it's probably like using that part of the computer to load it, you know that.

341
00:23:54,791 --> 00:23:57,750
Scott: But as a result, there's a side effect of video appearing on the screen.

342
00:23:57,790 --> 00:24:05,489
Rym: So in the oldest days, there was the pin on the chip, like the chip that did video stuff was also the pin that was used to take the audio data in.

343
00:24:06,094 --> 00:24:06,864
Rym: Just how it works.

344
00:24:07,168 --> 00:24:07,330
Scott: Yeah.

345
00:24:07,390 --> 00:24:11,255
Scott: So like something like, oh, I don't have enough RAM, but I got this, you know, video frame buffer.

346
00:24:11,416 --> 00:24:13,230
Scott: I'm not showing anything on the screen right now.

347
00:24:13,430 --> 00:24:15,470
Scott: I'll use that as RAM because it's memory.

348
00:24:15,932 --> 00:24:19,270
Scott: And then once I need to show something on the screen, I'll go back to having less RAM.

349
00:24:19,991 --> 00:24:27,290
Rym: But a side effect of this was that those bands, even though they were sort of a random artifact, were actually useful.

350
00:24:27,771 --> 00:24:27,992
Scott: Yeah.

351
00:24:28,013 --> 00:24:34,597
Scott: I mean, while if you're loading in the same program every time, you should be able to see if you see something different on the screen, you know that some loading thing happened wrong.

352
00:24:34,719 --> 00:24:35,670
Rym: Well, it's not just that.

353
00:24:35,730 --> 00:24:41,593
Rym: It's kind of like old network infrastructure, like old hubs and like old early network devices.

354
00:24:41,976 --> 00:24:44,229
Rym: There'd be little LEDs that would light up or divide.

355
00:24:44,550 --> 00:24:50,270
Rym: They'd light up when there was activity and they basically just piggybacked over the actual signals going over the wire.

356
00:24:50,812 --> 00:24:55,050
Rym: But they also ended up indicating the level of activity because the two things were tied.

357
00:24:55,413 --> 00:24:56,469
Rym: This is a very similar thing.

358
00:24:57,211 --> 00:25:05,369
Rym: The appearance and width of the bands would give you a good indicator of how well you were getting the data, whether or not it was actually loading, et cetera.

359
00:25:05,850 --> 00:25:17,833
Rym: And because people were used to them, you eventually get to this point to where later computers would actually implement the bands on purpose and the bands actually encode information.

360
00:25:17,853 --> 00:25:22,873
Rym: An expert user could watch these bands and understand how well their loader was functioning.

361
00:25:23,255 --> 00:25:28,589
Rym: And it got to the point to where these bands were literally 100 percent virtualized by applications.

362
00:25:29,734 --> 00:25:35,170
Rym: And this is a like five minute video that actually goes into pretty good detail explaining the history of these loading bands.

363
00:25:35,650 --> 00:25:37,719
Rym: And it's actually pretty fascinating, especially.

364
00:25:37,739 --> 00:25:42,330
Rym: you'll probably enjoy this if you don't know anything about that era of computing.

365
00:25:42,490 --> 00:25:44,829
Rym: There's a lot of tangents inside bits here.

366
00:25:45,170 --> 00:25:47,429
Rym: You'll learn a lot about what computers were like back in the day.

367
00:25:47,870 --> 00:25:56,550
Rym: There's a reason why the Nintendo Entertainment System or even the Atari 2600 was a far superior gaming machine to even the most advanced PCs of the day.

368
00:25:57,092 --> 00:26:07,753
Scott: Well, because, you know, the PCs had to run a much wider range of software and a whole keyboard going on and all kinds of, you know, peripherals that the NES didn't have to deal with.

369
00:26:08,054 --> 00:26:11,911
Scott: Yeah, the NES is very limited in some ways in order to become more advanced in other ways.

370
00:26:12,012 --> 00:26:14,970
Rym: Yeah, the gaming on PCs back in the day was basically Garbo.

371
00:26:16,851 --> 00:26:20,270
Rym: In the moment, the book of the book is still Emily Wilson's translation of The Odyssey.

372
00:26:20,612 --> 00:26:21,158
Rym: It's great.

373
00:26:21,562 --> 00:26:22,169
Rym: You should read it.

374
00:26:22,530 --> 00:26:24,710
Rym: We're going to finish it soon and do the show on it, I assume.

375
00:26:25,793 --> 00:26:26,435
Rym: Making progress?

376
00:26:26,756 --> 00:26:32,052
Scott: Yeah, it's not when I ride the subway, which I did today, but it's not a long read.

377
00:26:32,654 --> 00:26:41,490
Rym: If you read this translation, at least otherwise, our next big convention is probably going to be summer, which is hard to read, PAX West.

378
00:26:43,011 --> 00:26:49,932
Rym: And then after that, it's into PAX Unplugged and the Anime NYC, probably there's a good chance.

379
00:26:49,993 --> 00:26:54,112
Scott: I think it's Anime NYC, then Thanksgiving, then PAX Unplugged three weeks in a row.

380
00:26:54,192 --> 00:26:54,675
Scott: One, two, three.

381
00:26:54,755 --> 00:26:57,630
Rym: And then right after that, Anime NYC's first year was last year.

382
00:26:57,690 --> 00:27:01,130
Scott: And the only reason we didn't go was because it was during PAX Unplugged.

383
00:27:01,310 --> 00:27:01,450
Scott: Yep.

384
00:27:02,032 --> 00:27:09,640
Rym: And then right after that, I think we got Magfest and then PAX South and then PAX East and the cycle repeats.

385
00:27:10,002 --> 00:27:11,050
Rym: A lot of PAX is coming up.

386
00:27:11,310 --> 00:27:13,090
Scott: Before any conventions, it's going to be summer.

387
00:27:13,290 --> 00:27:13,996
Scott: It's summertime.

388
00:27:14,500 --> 00:27:15,750
Scott: Enjoy the summer.

389
00:27:15,890 --> 00:27:17,248
Scott: Read The Odyssey on the Beach.

390
00:27:17,851 --> 00:27:24,650
Rym: GeekNights content is going to be primarily focused on us being outside, not making content.

391
00:27:25,090 --> 00:27:29,269
Rym: So whenever it rains, you'll see like GeekNights presents you ten episodes come in.

392
00:27:30,432 --> 00:27:31,155
Rym: So, yeah, containers.

393
00:27:31,175 --> 00:27:35,123
Rym: I think we've talked off and on about things like Docker and various containers.

394
00:27:36,190 --> 00:27:40,454
Scott: It's weird because like this is on the one hand, it's sort of like a new hotness of technology.

395
00:27:40,474 --> 00:27:43,670
Scott: But on the other hand, this has actually been around for some years now.

396
00:27:44,050 --> 00:27:46,470
Rym: Well, the core concept has been around.

397
00:27:46,672 --> 00:27:48,629
Scott: The actual thing has been around for years now.

398
00:27:49,390 --> 00:27:49,511
Scott: Right.

399
00:27:50,154 --> 00:27:53,470
Scott: But I mean, there's a lot of different container formats and container platforms.

400
00:27:53,910 --> 00:27:57,105
Scott: And I guess Docker is still the most well-known king one.

401
00:27:57,246 --> 00:27:58,050
Scott: that is the one.

402
00:27:58,210 --> 00:27:59,389
Rym: And there's a lot of reasons for that.

403
00:27:59,530 --> 00:28:00,630
Rym: It's it's pretty well supported.

404
00:28:00,850 --> 00:28:04,790
Rym: It's it's a pretty mature container platform at this point.

405
00:28:05,332 --> 00:28:07,690
Scott: So it's so basically is that is the deal, right?

406
00:28:07,830 --> 00:28:13,258
Scott: It's actually took me quite a while to figure out how these things actually fucking work because they didn't they don't.

407
00:28:13,278 --> 00:28:20,090
Scott: all the documentation is like how to use the mode and the examples of even how to use them don't actually cover any real world use case.

408
00:28:20,190 --> 00:28:26,330
Scott: They're all hello world that get you nowhere or they're someone made an application and none of them actually tell you what's actually happening.

409
00:28:26,450 --> 00:28:27,810
Scott: They're just like, type this, then type this.

410
00:28:28,150 --> 00:28:28,883
Scott: Congratulations.

411
00:28:29,067 --> 00:28:29,250
Rym: Yep.

412
00:28:29,490 --> 00:28:41,760
Rym: Now, that is both good and bad, because on one hand, I do want like the hello world to exist for everything, because I found back in the day when I was trying to write like a lot of soap code for Python and stuff back.

413
00:28:41,780 --> 00:28:49,514
Rym: when I actually wrote code, what I'd find is that there'd always be like a hello world tutorial for some library and invariably they didn't actually even work.

414
00:28:50,578 --> 00:28:54,808
Rym: like you copy paste an example in and it just wouldn't work and you couldn't ask anyone about it.

415
00:28:55,250 --> 00:28:59,609
Rym: So I'm glad that that level exists here, like the babies first, like make it just work.

416
00:29:00,231 --> 00:29:07,969
Rym: But at the same time, I do find in my professional experience that a lot of the people who are using things like Docker literally have no idea how they work.

417
00:29:08,570 --> 00:29:08,631
Scott: No.

418
00:29:09,096 --> 00:29:10,250
Scott: So here's the thing, right?

419
00:29:10,390 --> 00:29:10,732
Scott: You got first.

420
00:29:10,773 --> 00:29:13,490
Scott: you got to think about what problem are we trying to solve?

421
00:29:13,550 --> 00:29:23,470
Scott: And there's a few problems that that these things, the new containers, Docker and all solve that were solved partially or in different ways by older technologies.

422
00:29:23,611 --> 00:29:23,792
Scott: Right.

423
00:29:24,234 --> 00:29:34,030
Scott: And a lot of people confuse the containers for those older technologies, because from a user experience, a user interface perspective, they seem very similar, even though they're doing something completely different.

424
00:29:34,130 --> 00:29:40,490
Scott: So the main problem we're trying to solve is that you have one computer with one CPU, even if it's multi core, doesn't matter.

425
00:29:40,710 --> 00:29:46,450
Rym: I would argue there's other problems you might be trying to solve, but I'll get back to One set of RAM, one hard drive, one network connection.

426
00:29:46,991 --> 00:29:54,763
Scott: But you want to run multiple or develop really multiple applications that really don't go well together.

427
00:29:54,783 --> 00:29:54,884
Scott: Right.

428
00:29:55,410 --> 00:30:00,550
Scott: They can't be, you know, like you only got one network card, but you want to run like two things or two different IP addresses.

429
00:30:00,870 --> 00:30:01,432
Scott: And so

430
00:30:01,874 --> 00:30:15,247
Rym: now before the Linux Santas come in, yes, if you make a fully formed like Linux application that puts all its stuff and all its dependencies and all the right directories in the Linux file system that they shouldn't ever like interact with each

431
00:30:15,308 --> 00:30:18,864
Scott: other, you can make, you know, one computer.

432
00:30:18,945 --> 00:30:20,030
Scott: do all these things at once.

433
00:30:20,391 --> 00:30:25,715
Scott: The problem is now you're trying to deploy this application or deliver it or have somebody else run it.

434
00:30:25,755 --> 00:30:28,691
Scott: You know, you got someone, a new developer comes in, they got to work on it too.

435
00:30:29,274 --> 00:30:33,291
Scott: Every system has to be perfectly identical because everything is so tied to the system.

436
00:30:33,352 --> 00:30:34,415
Scott: Right.

437
00:30:34,716 --> 00:30:50,147
Scott: Or, you know, so one thing people did back in the days, we had things like truths and BSD jails, which is just better truths, but they're BSD only where you would log into a Unix machine and you as far as you knew, you were like a root and you would see this whole root file system.

438
00:30:50,430 --> 00:30:51,889
Scott: You have permissions on the whole fucking thing.

439
00:30:52,111 --> 00:30:58,150
Scott: But really, you were trapped in this little area on the file system of a bigger Unix system.

440
00:30:58,412 --> 00:31:00,430
Scott: You just couldn't bust out and go up there.

441
00:31:00,490 --> 00:31:00,651
Scott: Right.

442
00:31:00,671 --> 00:31:06,210
Scott: There was actually like if you were on the real system, you would see all these folders like slash something slash Rym.

443
00:31:06,370 --> 00:31:13,213
Scott: And in that slash Rym would be a slash Etsy slash dev slash USRS, a full system in that directory.

444
00:31:13,575 --> 00:31:16,309
Scott: But when Rym logs in, he's trapped in that little world.

445
00:31:16,551 --> 00:31:16,792
Scott: Yeah.

446
00:31:16,832 --> 00:31:17,033
Scott: Right.

447
00:31:17,295 --> 00:31:20,129
Scott: So, you know, that's that's one way to do it.

448
00:31:20,431 --> 00:31:24,754
Scott: Another thing people would use a lot is just virtual machine, just have a whole virtual machine.

449
00:31:24,794 --> 00:31:26,550
Scott: And the thing is, that actually works great.

450
00:31:26,630 --> 00:31:33,969
Scott: You're completely container inside this whole VM system, but that kills you in terms of performance, first of all.

451
00:31:34,270 --> 00:31:34,411
Scott: Yeah.

452
00:31:34,491 --> 00:31:37,950
Scott: And second of all, it's doing a lot of things you don't need to do.

453
00:31:38,070 --> 00:31:38,271
Scott: Right.

454
00:31:38,311 --> 00:31:46,130
Scott: The point of a VM is like, OK, I need to pretend that I have, you know, like 10 network cards and I've only got, you know, one in the computer.

455
00:31:46,310 --> 00:31:46,773
Scott: I need 10.

456
00:31:46,773 --> 00:31:55,782
Rym: I'm just going to use software to pretend there's 10 video cards or just I want a bunch of applications running and I want them to act like they're the only thing running on top of this.

457
00:31:55,843 --> 00:31:56,510
Rym: But so nothing there.

458
00:31:56,910 --> 00:32:03,507
Scott: Simulating hardware with software is not an efficient way to do that necessarily, even though VMs have gotten real good, especially the CPU.

459
00:32:04,090 --> 00:32:09,073
Rym: And we've talked about that before, like para virtualization versus full virtualization and all that nonsense.

460
00:32:09,213 --> 00:32:20,750
Scott: And VMs also, if you're if you're a developer, VMs make working hard because now it's like even though you're on your computer, you got to like go into this other computer on your computer to access stuff and shared folders.

461
00:32:21,031 --> 00:32:23,170
Scott: And so what the hell are these containers things?

462
00:32:23,310 --> 00:32:24,177
Scott: How do they fucking work?

463
00:32:24,621 --> 00:32:25,529
Scott: So here's the deal.

464
00:32:26,172 --> 00:32:28,470
Scott: In Linux, they've added these two APIs.

465
00:32:28,510 --> 00:32:32,150
Scott: They added them years ago, but there's a whole other things they've done.

466
00:32:32,250 --> 00:32:37,173
Scott: But the major things they've done is they've added a feature called C groups and a feature called namespaces.

467
00:32:37,715 --> 00:32:44,950
Scott: And what this does on a unit on a Linux system is you create a C group and you create some processes that are in the C group.

468
00:32:45,611 --> 00:32:48,665
Scott: And what you can do is you can specify any.

469
00:32:48,685 --> 00:32:49,950
Scott: it's called control group.

470
00:32:49,990 --> 00:32:50,953
Scott: That's what the C is for.

471
00:32:51,535 --> 00:32:58,850
Scott: Any processes in this control group can only access this much RAM, this much CPU, this much network, this much whatever.

472
00:32:59,491 --> 00:33:06,255
Scott: And you can limit the resources available to certain processes so that they can't take over your whole system.

473
00:33:06,335 --> 00:33:23,130
Scott: And that's sort of like what a virtual machine does, right, is where, you know, if you're, you know, using a VM, but you're really only you're not interested in simulating hardware, you're just interested in keeping some processes from, you know, using your whole system, then C groups pretty much cover that feature.

474
00:33:23,852 --> 00:33:31,777
Scott: It just uses the Linux permissions thing to limit those, you know, processes from using thirty two gigs of RAM.

475
00:33:31,797 --> 00:33:36,810
Rym: They've only got eight gigs because otherwise shared VMs, that's ten operating systems to keep up to date.

476
00:33:36,930 --> 00:33:41,815
Scott: And now you don't need to run another copy of Linux kernel inside a VM and boot it and set that all up.

477
00:33:42,176 --> 00:33:45,150
Scott: You just need to say, hey, these processes get these eight gigs of RAM.

478
00:33:45,210 --> 00:33:46,427
Scott: the end of story.

479
00:33:46,508 --> 00:33:46,670
Scott: Right.

480
00:33:46,771 --> 00:33:47,949
Scott: So that's what the C groups does.

481
00:33:48,810 --> 00:33:57,030
Scott: The namespaces sort of covers the other part where it says, OK, these group of processes here, any process in this namespace can only see this part of the world.

482
00:33:57,273 --> 00:33:57,515
Scott: Right.

483
00:33:57,536 --> 00:33:58,750
Scott: They can only see each other.

484
00:33:58,970 --> 00:34:00,849
Scott: They can only see these other processes.

485
00:34:01,130 --> 00:34:03,890
Scott: They can only see these network and you're limiting their vision.

486
00:34:03,951 --> 00:34:04,637
Scott: That's the truth.

487
00:34:04,718 --> 00:34:05,850
Scott: And the BSD jails did.

488
00:34:05,990 --> 00:34:06,231
Scott: Right.

489
00:34:06,834 --> 00:34:09,505
Scott: So you combine these two things together and you actually.

490
00:34:09,525 --> 00:34:33,991
Scott: I've seen some tutorials online, people showing you they were hard to find where you can basically do exactly what Docker does just by using just the Unix, just your shell and just like catting certain, you know, and echoing certain things into various files in proc and dev to mostly proc to basically create C groups, create namespaces and put processes in them.

491
00:34:34,513 --> 00:34:43,498
Scott: And then to prove that those were actually doing exactly the same thing that Docker is doing, they then use Docker commands to talk to the processes that were created in those C groups.

492
00:34:43,882 --> 00:34:44,750
Scott: And it's the exact same thing.

493
00:34:44,909 --> 00:34:51,533
Scott: So Docker is really just a wrapper, a convenience wrapper around these C group and namespace features.

494
00:34:51,553 --> 00:35:00,571
Scott: Now, the value of the isolate processes on your OS, but they're basically those processes are running natively, just like any other process is running.

495
00:35:00,852 --> 00:35:21,510
Rym: Now, the value of making that easier shouldn't really be understated, because in my experience, especially like, you know, in the modern world, like it's been a long time since the last time I was writing code or anything, it's actually pretty hard to hire very skilled developers who are also very fluent in Unix Linux.

496
00:35:22,030 --> 00:35:22,090
Scott: Yes.

497
00:35:22,171 --> 00:35:24,220
Scott: So that's been my problem at work.

498
00:35:24,260 --> 00:35:31,110
Scott: forever is like I'm the king of Unix, basically, just because I happen to know what Linux was when I was in high school.

499
00:35:31,332 --> 00:35:33,026
Scott: I used it like even in RIT.

500
00:35:33,790 --> 00:35:37,150
Scott: It was often my primary OS when I wasn't gaming so much.

501
00:35:37,650 --> 00:35:40,609
Rym: GeekNights was produced entirely in Linux for a long time.

502
00:35:40,930 --> 00:35:41,233
Scott: Right.

503
00:35:41,253 --> 00:35:43,190
Scott: You know, not many people were Linux nerds.

504
00:35:43,371 --> 00:35:48,270
Scott: So because I have those Linux, Unix skills, a lot of people don't have at work.

505
00:35:48,631 --> 00:35:51,729
Scott: It's everyone else is a Mac and they don't know how to Linux, except that me.

506
00:35:52,271 --> 00:35:57,130
Scott: So when it comes to things like DevOps and sysadmin, even though I'm programming is my job, I have all these other skills.

507
00:35:57,350 --> 00:36:09,648
Rym: Speaking of which, if anyone out there is a senior skilled CC++ developer who also knows other languages and is a pretty much Linux expert like Scott, I am me.

508
00:36:10,672 --> 00:36:13,549
Rym: You know me, I'm really looking to hire like six of you.

509
00:36:13,872 --> 00:36:14,748
Scott: You have enough monies?

510
00:36:15,690 --> 00:36:19,690
Rym: Yeah, I just can't find people like a million dollars.

511
00:36:20,311 --> 00:36:22,184
Rym: Anyway, I just can't find six of them anyway.

512
00:36:24,956 --> 00:36:26,170
Scott: So, yeah, so that's what's going on here.

513
00:36:26,170 --> 00:36:40,394
Scott: The other thing Docker does that that beyond just managing your C group and and your namespace features of the kernel is they have this sort of repository package system of containers.

514
00:36:40,455 --> 00:36:46,470
Scott: So you can basically make a Docker container, which is really just a list of instructions on how to make a system.

515
00:36:46,570 --> 00:36:54,370
Scott: So it's sort of like, you know, OK, you know, do this command and this command and this command and I've got your container and then you can build a container from a container.

516
00:36:54,470 --> 00:37:01,450
Scott: So what you eventually what you do in real life is you're like your first line of your container file is like Ubuntu version, whatever.

517
00:37:01,952 --> 00:37:04,589
Scott: And then your next line is apt install this.

518
00:37:04,871 --> 00:37:07,630
Scott: And then your next line is edit this config file.

519
00:37:07,791 --> 00:37:09,790
Scott: And now that's that's how to build your container.

520
00:37:09,951 --> 00:37:10,131
Scott: Right.

521
00:37:10,472 --> 00:37:17,577
Scott: So then you take that container and you share it and other people can then go and just download that file.

522
00:37:17,898 --> 00:37:24,050
Scott: or you deliver that file with your code or they use Docker install to get it from the main Docker repository.

523
00:37:24,572 --> 00:37:27,462
Scott: And if you can just download this container and there it is, it's running.

524
00:37:27,904 --> 00:37:42,650
Scott: so you can solve the problem, not just of separating and making your apps not touch each other on the same system, but you can solve the problem of, OK, I've got all these developers all using different computers, who knows what.

525
00:37:43,111 --> 00:37:53,415
Scott: But anyone who wants to work on my application and develop this software, you can get clone and download the software, the code, and then you can type Docker up, Docker and Compose up.

526
00:37:53,859 --> 00:37:55,050
Scott: And now look at that.

527
00:37:55,090 --> 00:37:56,130
Scott: You've got the environment running.

528
00:37:56,191 --> 00:37:57,708
Scott: You don't have to do any environment set up.

529
00:37:57,870 --> 00:37:58,091
Rym: Yep.

530
00:37:58,152 --> 00:38:01,310
Scott: And that you don't have to know anything about environment set up or anything about.

531
00:38:01,852 --> 00:38:05,183
Rym: In the previous era, like before, there were like easy ways to do this.

532
00:38:06,086 --> 00:38:11,490
Rym: environment set up was a huge part of the rollout process, if anything I've ever been involved in.

533
00:38:11,710 --> 00:38:11,790
Scott: Yeah.

534
00:38:11,811 --> 00:38:17,690
Scott: I mean, you would show up at a new job as a developer and it would take you like a day or change to set things up.

535
00:38:17,890 --> 00:38:21,390
Rym: It took me three or four days to say, well, because I was doing IT, I wasn't coding.

536
00:38:21,610 --> 00:38:29,510
Rym: But even then, I needed everyone had to have like a local VM that basically mirrored what the production systems are like.

537
00:38:29,610 --> 00:38:32,122
Rym: You had an environment, there are tools.

538
00:38:32,142 --> 00:38:35,408
Scott: that is vagrant, which is a tool that helps you do that with VirtualBox more easily.

539
00:38:36,190 --> 00:38:37,789
Rym: But, you know, even then it was a pain in the ass.

540
00:38:38,971 --> 00:38:39,252
Scott: Yeah.

541
00:38:39,272 --> 00:38:43,997
Scott: So but people were amazed at my work when I had it running in like a day, like, I know what the hell I'm doing.

542
00:38:44,037 --> 00:38:45,350
Scott: That's why you hired me.

543
00:38:45,831 --> 00:38:47,274
Scott: Right.

544
00:38:47,415 --> 00:38:55,107
Scott: So the thing is, as cool as that all sounds on paper, the reality is that Docker is actually got a lot of crappy problems.

545
00:38:56,454 --> 00:38:57,170
Scott: It's not great.

546
00:38:57,230 --> 00:39:00,930
Scott: So first of all, right, using these Linux kernel APIs, guess what?

547
00:39:01,190 --> 00:39:02,849
Scott: Windows and no access don't have those APIs.

548
00:39:03,151 --> 00:39:06,909
Scott: Yeah, but who cares if you run and run Docker on Windows or OS X?

549
00:39:07,311 --> 00:39:12,649
Scott: What's actually basically happening is you're running a virtual machine with a Linux kernel in it that you then talk to.

550
00:39:12,790 --> 00:39:16,430
Rym: But honestly, who cares what's your server going to be but a Linux server?

551
00:39:17,111 --> 00:39:19,330
Scott: Well, because you're talking about local development, right?

552
00:39:19,610 --> 00:39:20,253
Scott: Yeah.

553
00:39:20,273 --> 00:39:26,630
Scott: So the next problem that makes Docker kind of crappy is like this volumes thing, right, which I still don't fully understand.

554
00:39:27,092 --> 00:39:29,605
Scott: But basically, you know, you still want to have some sort of.

555
00:39:29,625 --> 00:39:30,712
Scott: it has to do with storage, right?

556
00:39:30,732 --> 00:39:31,670
Scott: So you have some storage.

557
00:39:31,771 --> 00:39:33,690
Scott: You want to have it shared between containers.

558
00:39:33,812 --> 00:39:34,949
Scott: Maybe that's your source code is.

559
00:39:35,150 --> 00:39:36,590
Scott: Maybe that's where, you know, your binaries are.

560
00:39:36,770 --> 00:39:41,353
Rym: Or maybe you're using these containers on a production environment because you spin what you spin them up.

561
00:39:41,394 --> 00:39:47,730
Scott: You got to be a database in a volume somewhere so that all these different, you know, database servers can all access something like that.

562
00:39:48,011 --> 00:39:48,172
Scott: Right.

563
00:39:48,473 --> 00:39:55,390
Scott: And basically the way the volumes are implemented, as far as I can tell, I know the details, but the result as a user of them is that is complete garbage.

564
00:39:55,531 --> 00:39:59,630
Scott: It kills like an OS X or performance just goes to shit on Linux.

565
00:39:59,770 --> 00:40:05,357
Scott: You have all these kinds of issues like files getting overwritten or permissions problems and all kinds of like.

566
00:40:05,377 --> 00:40:08,312
Scott: you go into the container and in the container, your root for everything.

567
00:40:08,633 --> 00:40:16,754
Scott: And then so that container writes to a volume and then you leave the container and now the file is root, even though in the other container it wasn't root and you can't get that.

568
00:40:16,794 --> 00:40:19,972
Scott: You can't translate the user permissions over to the inside of the container.

569
00:40:19,992 --> 00:40:24,110
Scott: You got issues like you do Docker up and you have a dependency.

570
00:40:24,210 --> 00:40:28,290
Scott: You say, ah, don't start this container until that other container is started.

571
00:40:28,612 --> 00:40:33,154
Scott: So the other container starts, but it hasn't actually started the application in the container yet.

572
00:40:33,557 --> 00:40:35,590
Scott: But the other container has no way of knowing.

573
00:40:35,992 --> 00:40:38,890
Scott: So now it fails to start up because the database isn't actually started.

574
00:40:38,970 --> 00:40:39,577
Scott: And you're supposed to.

575
00:40:39,739 --> 00:40:40,590
Scott: the solution for this.

576
00:40:40,690 --> 00:40:46,250
Scott: The official solution is to write a wrapper script for everything, which is complete horseshit, duct tape, garbage.

577
00:40:46,832 --> 00:40:47,073
Scott: Right.

578
00:40:47,093 --> 00:40:49,109
Scott: It's not elegant or good at all.

579
00:40:50,391 --> 00:40:55,729
Scott: So, you know, it's like as nice as this is like, ah, you've made a wrapper for these APIs that are otherwise difficult to use.

580
00:40:57,232 --> 00:41:00,270
Scott: It's still really crappy and not well done and not nice.

581
00:41:00,850 --> 00:41:20,769
Scott: So what I would recommend to people is if you want to solve the problems of I'm developing a software and I need other people to also develop the software who have different computers and I want them to be able to get up to speed quickly and not have to learn Unix, then I think Docker and other containers are a good solution for that because it makes it easy.

582
00:41:22,332 --> 00:41:26,870
Scott: If you want to run your stuff in production, I do not recommend the Docker.

583
00:41:27,290 --> 00:41:35,330
Rym: Yeah, well, well, so it depends on what you're putting in production, because an area that I actually have a lot of wood to cut right now is a bunch of microservices.

584
00:41:36,470 --> 00:41:41,213
Rym: And Docker is actually pretty good for productionizing microservices in certain content.

585
00:41:41,233 --> 00:41:43,450
Scott: If you've got something real simple, right.

586
00:41:43,650 --> 00:41:52,030
Rym: Like if you want to make a real simple API that does really local stuff and provides like a rest interface for a limited set of interactions on one type of thing.

587
00:41:52,331 --> 00:41:54,110
Scott: If you've got something so simple, it just runs.

588
00:41:54,250 --> 00:41:55,080
Scott: It's one process.

589
00:41:55,120 --> 00:41:55,909
Scott: It runs on its own.

590
00:41:56,432 --> 00:41:56,633
Scott: Right.

591
00:41:56,713 --> 00:41:59,270
Scott: It doesn't need a whole lot of dependencies and it's not complicated.

592
00:41:59,772 --> 00:42:06,290
Scott: You can probably just make it in a container and get that container to run on some sort of, you know, serverless platform and it'll be just fine.

593
00:42:06,450 --> 00:42:20,590
Rym: Because a big part of like modern delivery of software, especially web services or web facing tools or like big things in companies, is that there's a lot of physical infrastructure and a lot of machines and a lot of VMs and all this nonsense.

594
00:42:21,350 --> 00:42:31,613
Rym: And environments get out of control or you've got to stage things from dev to QA to UAT to pre-production, to production, to scaled production.

595
00:42:32,376 --> 00:42:49,714
Rym: And if you can break things down into these very simple microservices and Dockerize or use some sort of some way to make sure the environment within the local environment of each one of these services is identical in all these environments, regardless of the hardware or even the OS you might be on top of.

596
00:42:50,238 --> 00:42:51,950
Rym: There's a huge operational win there.

597
00:42:52,271 --> 00:42:53,175
Scott: If you can set it up.

598
00:42:53,236 --> 00:43:02,247
Scott: The thing is, in reality, what I've seen is that most people who try to use these things like Docker pool and Kubernetes and all these platforms for Docker in production.

599
00:43:02,288 --> 00:43:02,430
Scott: Right.

600
00:43:02,470 --> 00:43:06,730
Scott: Where you basically, OK, my application has, you know, these processes.

601
00:43:07,070 --> 00:43:09,170
Scott: There's this process that, you know, three processes.

602
00:43:09,792 --> 00:43:17,098
Scott: I just set up a whole farm, just machines, and then I spin up any number of containers for those processes.

603
00:43:17,138 --> 00:43:19,350
Scott: And if they fail, I spin up new ones and such and such.

604
00:43:19,655 --> 00:43:20,510
Scott: And it's all magical.

605
00:43:22,150 --> 00:43:26,530
Scott: Every basically almost anyone I've seen, like, try to set that up has been a disaster.

606
00:43:27,031 --> 00:43:27,836
Scott: And they have not.

607
00:43:28,219 --> 00:43:29,587
Scott: the benefits have not been reaped.

608
00:43:30,411 --> 00:43:32,930
Rym: I have reaped those benefits and I have that shit working.

609
00:43:33,311 --> 00:43:42,269
Rym: But unfortunately, I'm at a level of the way I interact with my engineering teams that I don't see the details of how they make this happen.

610
00:43:42,510 --> 00:43:49,670
Scott: The point is, if you have the skills to sort of make that happen, well, you could have just set up servers, right?

611
00:43:49,790 --> 00:43:50,774
Scott: You don't.

612
00:43:50,854 --> 00:43:56,658
Scott: the Docker in that case is really only saving you the trouble of having to know things about this.

613
00:43:56,779 --> 00:43:58,510
Scott: It's not really saving you any other trouble.

614
00:43:58,610 --> 00:44:03,605
Rym: I put it this way, use containers if they solve a problem you have.

615
00:44:03,866 --> 00:44:04,869
Rym: that isn't just.

616
00:44:05,230 --> 00:44:07,210
Rym: I don't know how to set up a single Linux server.

617
00:44:07,610 --> 00:44:14,789
Rym: If you're running one Linux server for production and one for UAT and one for dev, you probably don't need Docker.

618
00:44:14,910 --> 00:44:16,609
Rym: You can probably keep those in sync.

619
00:44:17,030 --> 00:44:22,352
Scott: Because like the namespaces issue is about keeping you separating the resources on the machine.

620
00:44:22,412 --> 00:44:22,613
Scott: Right.

621
00:44:22,674 --> 00:44:26,417
Scott: But in production, the only thing running on the machine is your application.

622
00:44:26,458 --> 00:44:27,490
Scott: What else is running on there?

623
00:44:27,631 --> 00:44:29,050
Scott: It's not a local development machines.

624
00:44:29,210 --> 00:44:31,030
Scott: You don't need the namespaces and the secret.

625
00:44:31,370 --> 00:44:35,836
Rym: Unless your production is so big that you've got like 20 different services you're providing.

626
00:44:35,897 --> 00:44:38,750
Scott: So the C groups are to manage the resources.

627
00:44:38,971 --> 00:44:39,433
Scott: Right.

628
00:44:39,473 --> 00:44:42,769
Scott: Don't let this process use more than 25 percent of the CPU, stuff like that.

629
00:44:43,291 --> 00:44:46,245
Scott: But if you're have a big server farm, you can just use.

630
00:44:46,446 --> 00:44:48,410
Scott: you're probably using some sort of pair of virtualization.

631
00:44:49,071 --> 00:44:55,902
Scott: And even though it's one hardware machine, like one giant one thing on a rack, it's actually running multiple VMs in it.

632
00:44:57,230 --> 00:44:58,550
Scott: So you've split things up that way.

633
00:44:58,610 --> 00:45:00,769
Scott: You don't need another layer of splitting up.

634
00:45:01,211 --> 00:45:03,130
Scott: We've already got the pair of virtualization.

635
00:45:03,330 --> 00:45:04,610
Rym: Know what you need your layer for.

636
00:45:04,810 --> 00:45:05,574
Rym: There's like this too.

637
00:45:05,876 --> 00:45:08,913
Rym: You can use things like Docker to make consistent development environments.

638
00:45:08,934 --> 00:45:11,450
Rym: And there's a whole set of challenges and values and pros and cons there.

639
00:45:11,751 --> 00:45:15,850
Rym: And then using this for production services is a different problem.

640
00:45:16,131 --> 00:45:20,210
Rym: And it's a very it's a very different space to decide if it's actually worth it or not.

641
00:45:20,330 --> 00:45:22,629
Scott: And also, you know, and like I said, there's a lot of hassles.

642
00:45:22,810 --> 00:45:25,270
Scott: You're basically trading one hassle for another.

643
00:45:25,712 --> 00:45:25,953
Scott: Right.

644
00:45:26,013 --> 00:45:32,169
Scott: It's like you can avoid some Munich stuff and some set up and some labor, but that stuff is almost always just going to work.

645
00:45:32,691 --> 00:45:35,889
Scott: Whereas if you go to Docker, you can avoid doing some of that work.

646
00:45:36,310 --> 00:45:38,527
Scott: Instead, you got to deal with these hassles.

647
00:45:39,413 --> 00:45:39,698
Scott: Yeah.

648
00:45:39,779 --> 00:45:40,529
Scott: The shit not working.

649
00:45:40,730 --> 00:45:57,613
Rym: Well, more importantly, my real my real worry is that a lot of orchestration of, you know, a lot of people at that stage in like a production environment might use something like Docker because it's easy, but not fully understand the ramifications of the way they've set it up.

650
00:45:57,894 --> 00:46:03,860
Scott: I don't think security holes, most people, performance problems, the people I have seen using it don't have.

651
00:46:04,222 --> 00:46:13,530
Scott: even the ones who are pretty good at it and understand, you know, you know, configuring it and making Docker files don't actually understand how it works at the cgroups and the namespaces and all that stuff.

652
00:46:13,870 --> 00:46:14,455
Scott: Yeah.

653
00:46:14,596 --> 00:46:16,248
Scott: They just sort of, you know, they don't understand.

654
00:46:16,690 --> 00:46:18,748
Scott: People don't understand there's between a container and a VM.

655
00:46:19,091 --> 00:46:22,937
Rym: But if you're using that just to make development environments, at least that's relatively safe.

656
00:46:22,957 --> 00:46:24,549
Rym: Like the damage you could do is minimal.

657
00:46:24,950 --> 00:46:26,389
Scott: That's what I think it's I think is good for.

658
00:46:26,650 --> 00:46:26,770
Rym: Yeah.

659
00:46:27,092 --> 00:46:31,630
Rym: But don't just take Dockers and deploy them into production.

660
00:46:31,811 --> 00:46:41,350
Rym: If no one on your team can go deep into what Docker is actually doing with the US, you need at least one person who understands what it's doing on the low level.

661
00:46:42,091 --> 00:46:52,629
Scott: Now, the the the one benefit of using Docker in production, right, is that you have a situation where, you know, people are developing locally, right?

662
00:46:52,931 --> 00:46:54,169
Scott: They're using the Docker to make it easy.

663
00:46:54,851 --> 00:46:59,630
Scott: But in production, right, the environment might be different than local.

664
00:46:59,991 --> 00:47:00,272
Scott: Yeah.

665
00:47:00,512 --> 00:47:08,550
Scott: If you use Docker, the one major thing you can do is that to make sure the production environment is the same as the local environment.

666
00:47:08,630 --> 00:47:11,890
Scott: And you can do this with or without using Docker in production.

667
00:47:11,990 --> 00:47:12,131
Scott: Right.

668
00:47:12,151 --> 00:47:18,289
Scott: You can simply make sure that the Docker file creates an environment that's identical to the production one because it's just Linux.

669
00:47:18,590 --> 00:47:23,172
Rym: You could version your Dockers, you have Dockers that reflect various planned stages of production.

670
00:47:23,192 --> 00:47:26,990
Scott: So it's like, OK, in production, we're using this Linux distribution.

671
00:47:27,071 --> 00:47:29,510
Scott: So your Docker container makes that Linux distribution.

672
00:47:29,792 --> 00:47:29,974
Scott: Right.

673
00:47:30,217 --> 00:47:31,550
Scott: And now you made sure it's identical.

674
00:47:31,670 --> 00:47:35,430
Scott: So people are developing in an environment that's identical to the production one.

675
00:47:35,852 --> 00:47:41,530
Scott: And if you do end up using Docker in production, well, then you're definitely using the same exact environment because you're using the same Docker file.

676
00:47:41,650 --> 00:47:50,474
Scott: And this makes it really easy if you have had lots of problems at work in the day when everyone's developing on Macs and then problems appear when stuff goes to production, because guess what?

677
00:47:50,514 --> 00:47:53,549
Scott: They were developing on OS X and the server is not OS X.

678
00:47:53,730 --> 00:47:57,050
Rym: Or you got a complex system with a lot of dependencies and multiple engineering teams.

679
00:47:57,410 --> 00:48:01,270
Rym: At that point, you might be in situations where you could use things like Docker.

680
00:48:01,471 --> 00:48:10,410
Rym: So people who are writing code that will go to production later might be using a Docker that has the updated set of dependencies that's going to be in production at one point.

681
00:48:10,831 --> 00:48:14,170
Rym: And it makes it a lot easier to coordinate when code is production.

682
00:48:14,870 --> 00:48:20,854
Rym: All its dependencies are in production at that time without having to maintain a million VMs.

683
00:48:20,874 --> 00:48:23,770
Scott: Another thing you can do, for example, is let's say you write in a Python app.

684
00:48:23,890 --> 00:48:24,775
Scott: It's just a Python script.

685
00:48:25,238 --> 00:48:27,210
Scott: And you make a container for your Python script.

686
00:48:27,732 --> 00:48:32,575
Scott: And in your container file, you're pretty much there's Python containers available to download.

687
00:48:32,999 --> 00:48:33,970
Scott: You just make a Docker file.

688
00:48:34,051 --> 00:48:36,630
Scott: And the first line is going to be like, it's going to be two lines.

689
00:48:36,750 --> 00:48:42,212
Scott: The first line is going to be, you know, start with the container Python colon version number.

690
00:48:42,453 --> 00:48:46,350
Scott: And the second line is going to be execute my script, Python space, my script.

691
00:48:46,831 --> 00:48:47,032
Scott: All right.

692
00:48:47,434 --> 00:48:52,890
Scott: So you want to test the script, the different versions of Python, just edit the Docker file, run it, edit the Docker file, run it.

693
00:48:52,890 --> 00:48:59,089
Scott: And now you're testing all these different versions of Python without having to install a hundred different versions of Python on your OS.

694
00:48:59,370 --> 00:48:59,956
Rym: Actually, that's a good point.

695
00:48:59,976 --> 00:49:01,290
Rym: That's one use case I've seen.

696
00:49:01,450 --> 00:49:01,812
Rym: You can

697
00:49:01,852 --> 00:49:17,531
Scott: keep downloading all these different containers or building all these different containers with all these different versions of things and run your same code and test it in all these different versions to see, you know, and if you're the kind of if you're making software that needs to be deployed in situations where different versions of things.

698
00:49:17,932 --> 00:49:21,242
Scott: Oh, I want to test my web app on Apache 2 and Apache 2.1 or not.

699
00:49:21,483 --> 00:49:26,007
Scott: even that new version of Ubuntu came out with very complex versions.

700
00:49:26,791 --> 00:49:31,507
Rym: A big problem is actually maintaining and running unit tests against code.

701
00:49:31,869 --> 00:49:38,132
Rym: that actually gets problematic because you might have very complex unit tests that change the state of an environment.

702
00:49:38,734 --> 00:49:50,077
Rym: And I've seen some recent modern QA processes spin up a million different Dockers, each of which is a self-contained environment to test one particular thing is most of the.

703
00:49:50,097 --> 00:49:53,654
Scott: if you look around, if you want to try out containers for testing.

704
00:49:53,714 --> 00:49:53,996
Scott: Right.

705
00:49:54,197 --> 00:49:56,850
Scott: There's many equivalent, I'm not endorsing this one.

706
00:49:56,990 --> 00:49:57,754
Scott: It's just one I know of.

707
00:49:58,437 --> 00:50:00,667
Scott: But it's CircleCI and they have a free tier.

708
00:50:02,030 --> 00:50:02,172
Scott: Right.

709
00:50:02,192 --> 00:50:03,809
Scott: So what you do, I don't know about them.

710
00:50:04,050 --> 00:50:05,630
Scott: You get it's continuous integration.

711
00:50:05,911 --> 00:50:06,154
Scott: Right.

712
00:50:06,174 --> 00:50:07,370
Scott: This is a super popular thing.

713
00:50:07,510 --> 00:50:08,528
Scott: GitLab has it built in.

714
00:50:08,892 --> 00:50:11,310
Scott: But you basically you go to GitHub, you make your get your thing.

715
00:50:11,430 --> 00:50:12,949
Scott: You go to CircleCI, you get the free tier.

716
00:50:13,410 --> 00:50:13,615
Scott: Right.

717
00:50:13,677 --> 00:50:14,230
Scott: There's a free tier.

718
00:50:14,370 --> 00:50:17,750
Scott: I think it's like one one unit or whatever.

719
00:50:18,292 --> 00:50:19,990
Scott: And you basically hook it up to your GitHub.

720
00:50:20,952 --> 00:50:24,750
Scott: You put a dot CircleCI file with instructions and how to run your tests and stuff.

721
00:50:25,370 --> 00:50:31,753
Scott: And then what happens is basically any time you merge into your thing, it's going to take your.

722
00:50:31,854 --> 00:50:33,028
Scott: it's going to go to CircleCI.

723
00:50:33,370 --> 00:50:38,860
Scott: CircleCI is going to use Docker to create a container that runs your app according to your instructions.

724
00:50:39,408 --> 00:50:39,590
Scott: Right.

725
00:50:39,630 --> 00:50:41,099
Scott: And they can just do this because they can.

726
00:50:41,361 --> 00:50:42,930
Scott: they can run everyone in the whole world.

727
00:50:42,970 --> 00:50:49,230
Scott: They can run all everyone's apps no matter what you're developing, because they're just making containers and turning them on, running tests in the container.

728
00:50:49,230 --> 00:50:54,890
Rym: That is way easier than like Jenkins running a bunch of unit tests against your environment.

729
00:50:55,190 --> 00:50:56,489
Scott: Maybe that's basically what Jenkins does, too.

730
00:50:56,691 --> 00:50:58,230
Scott: It's basically this is a host of Jenkins.

731
00:50:59,113 --> 00:50:59,315
Scott: Right.

732
00:50:59,356 --> 00:51:00,989
Scott: But you can use Jenkins to do the same thing.

733
00:51:01,492 --> 00:51:03,750
Scott: You make suddenly you got a testing server.

734
00:51:04,053 --> 00:51:05,910
Scott: It needs to test all these different applications.

735
00:51:06,352 --> 00:51:08,570
Scott: It can test anything as long as it runs in a container.

736
00:51:08,990 --> 00:51:13,090
Scott: All it does is turn on container, execute command in container, close container.

737
00:51:13,310 --> 00:51:23,953
Rym: But that's very good for the information for the test unit tests that change the state of the environment or especially negative unit tests that test against a broken on purpose environment.

738
00:51:24,074 --> 00:51:24,234
Rym: Yeah.

739
00:51:24,255 --> 00:51:32,352
Scott: So, you know, you can basically have your tests run in containers and then you can have these servers that can run any test on anything as long as it's in a container.

740
00:51:32,512 --> 00:51:37,350
Rym: So I really say like a lot of a lot of people listen to GeekNights or younger and they're still in college or they're early in their career.

741
00:51:38,191 --> 00:51:41,830
Rym: You want to have a guaranteed job, be good at both Linux and Docker.

742
00:51:42,471 --> 00:51:49,190
Rym: I mean, you know, if you can be good at both of them, you can solve the kinds of problems that a lot of mid-tier companies have.

743
00:51:49,530 --> 00:51:49,771
Scott: Yeah.

744
00:51:49,791 --> 00:51:56,250
Scott: I mean, the problem is, is you don't write code, is not that Linux skills are not valuable.

745
00:51:56,371 --> 00:51:58,550
Scott: It's that a lot of people don't value them.

746
00:51:58,630 --> 00:51:58,771
Scott: Right.

747
00:51:58,811 --> 00:52:08,665
Scott: Their companies will just get by without learning Linux, though, though, instead of having someone learn how to build a container testing platform and they'll just pay someone else to pay the Circle C.I.

748
00:52:09,211 --> 00:52:11,559
Scott: or the Jenkins or, you know, those pay that.

749
00:52:11,600 --> 00:52:18,790
Scott: then the containers are allowing people to sort of offload knowledge to these centralized companies.

750
00:52:19,070 --> 00:52:19,755
Scott: And they're right.

751
00:52:19,816 --> 00:52:21,810
Rym: Like there is a time and a place to do that.

752
00:52:22,030 --> 00:52:35,050
Scott: The Azures and the Googles with all their, you know, their cloud hosting, basically cloud providers have all the people who have real knowledge about things and then everyone else just pays them and does things the easy baby way and doesn't have anyone working for them.

753
00:52:35,250 --> 00:52:38,130
Rym: But there's not necessarily anything wrong with that.

754
00:52:38,230 --> 00:52:40,910
Rym: That comes down to the stuff that I deal with on the business level.

755
00:52:41,532 --> 00:52:43,629
Rym: What is the thing you're doing and how does that make money?

756
00:52:44,971 --> 00:52:53,193
Rym: And whenever possible, it's not always the best idea, but sometimes a good idea to find the things that don't actually matter to the way you're making money and pay someone else to handle it.

757
00:52:53,234 --> 00:52:55,150
Scott: Problem is those things don't matter until they matter.

758
00:52:55,290 --> 00:52:56,336
Scott: And then you hire people.

759
00:52:56,517 --> 00:52:59,078
Scott: Yeah, it's like it's like, oh, I did everything with these containers.

760
00:52:59,119 --> 00:52:59,709
Scott: Everything's beautiful.

761
00:52:59,951 --> 00:53:03,840
Scott: And then you go live and then your application gets more complex and then, oh, my God, this doesn't work anymore.

762
00:53:04,002 --> 00:53:04,630
Rym: Well, that's the thing.

763
00:53:04,870 --> 00:53:09,770
Rym: What's the scale of what you're doing and set your resources appropriately?

764
00:53:09,930 --> 00:53:12,269
Rym: The GeekNights Forum is just a Docker we download and run.

765
00:53:12,713 --> 00:53:15,030
Scott: Well, yeah, I mean, because that's a good example, right?

766
00:53:15,290 --> 00:53:27,710
Scott: So because back in the day, when you would want to run a Web app, it'd be written in PHP and PHP was done in such a way that you set up your Web server like Apache and you put files in a folder, which anyone can do, even unmanaged hosting, and then it runs.

767
00:53:27,990 --> 00:53:28,936
Scott: You don't have to do anything.

768
00:53:28,956 --> 00:53:31,451
Scott: You just got to type in the MySQL username and password and you're done.

769
00:53:31,954 --> 00:53:36,416
Scott: Right now, if you want to run a Python Web application that's not written in PHP, you can't.

770
00:53:36,477 --> 00:53:38,210
Scott: just I don't know why they didn't make it this way.

771
00:53:38,310 --> 00:53:40,790
Scott: They could have where they could have made it.

772
00:53:40,790 --> 00:53:43,446
Scott: We just put Python files in a folder and they run, but they don't.

773
00:53:43,526 --> 00:53:44,250
Scott: it doesn't work that way.

774
00:53:44,271 --> 00:53:49,671
Scott: You have to run a Python server interpreter and then Apache or Nginx proxies to that.

775
00:53:50,073 --> 00:54:00,490
Scott: That's how it works, which means if you want to if you write a Web application in Python, which is very easy to do, getting into production compared to PHP is for someone who doesn't know, Unix is way hard.

776
00:54:00,550 --> 00:54:02,410
Scott: You can't just put the files you wrote in a folder.

777
00:54:02,490 --> 00:54:07,630
Scott: You have to set up a server, install libraries, do all this stuff, configure Apache.

778
00:54:07,791 --> 00:54:07,951
Scott: Right.

779
00:54:08,374 --> 00:54:11,370
Scott: So the containers, they make that problem go away.

780
00:54:11,470 --> 00:54:13,290
Scott: The forum software we use is written in Ruby.

781
00:54:13,630 --> 00:54:14,629
Scott: It needs all that same stuff.

782
00:54:15,191 --> 00:54:18,930
Scott: So instead they want installation for people to run the forum to be easy.

783
00:54:19,190 --> 00:54:25,530
Scott: People who don't have the knowledge, they want them to be able to run this forum software with having to learn anything or do a complicated setup.

784
00:54:26,091 --> 00:54:36,072
Scott: So the instructions are pretty much download the code, type in these couple of commands and make sure you have Docker installed and the form will start and you don't have to do anything.

785
00:54:36,233 --> 00:54:36,414
Rym: Yeah.

786
00:54:36,454 --> 00:54:39,070
Rym: But again, look at our use case, look at our performance needs.

787
00:54:39,711 --> 00:54:41,190
Rym: There's a look at our operational needs.

788
00:54:41,850 --> 00:54:45,770
Rym: Neither one of us wants to futz around with anything for like GeekNights hosting.

789
00:54:46,471 --> 00:54:48,462
Scott: And then, you know, for example, they have features built.

790
00:54:48,503 --> 00:54:53,309
Scott: on top of that, like when there's an update to the forum, you push a button and the container turns off.

791
00:54:53,490 --> 00:54:54,970
Scott: The content doesn't get pulled.

792
00:54:55,110 --> 00:54:58,008
Scott: The container turns on again and rebuilds itself and so on.

793
00:55:00,594 --> 00:55:01,990
Rym: I think I'm hungry, so we can just stop there.

794
00:55:02,130 --> 00:55:03,156
Rym: I think I'm also also.

795
00:55:03,237 --> 00:55:05,350
Rym: someone just came in expecting a debate on Rubbermaid.

796
00:55:05,472 --> 00:55:06,790
Scott: That was the joke I made before the show.

797
00:55:06,931 --> 00:55:07,580
Scott: You're too slow.

798
00:55:07,621 --> 00:55:08,149
Rym: Should we?

799
00:55:08,650 --> 00:55:09,729
Rym: That could be our next Thursday show.

800
00:55:11,231 --> 00:55:13,350
Scott: I don't have much to say other than buy the glass snap.

801
00:55:13,470 --> 00:55:17,030
Rym: Yeah, the moral is glass is superior, plastic inferior.

802
00:55:23,330 --> 00:55:25,470
Rym: This has been GeekNights with Rym and Scott.

803
00:55:25,670 --> 00:55:30,774
Rym: Special thanks to DJ Pretzel for the opening music, Kat Lee for web design and Brando K for the logos.

804
00:55:30,974 --> 00:55:36,035
Scott: Be sure to visit our website at frontrowcrew.com for show notes, discussion news and more.

805
00:55:36,256 --> 00:55:38,930
Rym: Remember, GeekNights is not one, but four different shows.

806
00:55:39,070 --> 00:55:43,670
Rym: SciTech Mondays, Gaming Tuesdays, Anime Comic Wednesdays and Indiscriminate Thursdays.

807
00:55:44,090 --> 00:55:47,206
Scott: GeekNights is distributed under a Creative Commons Attribution 3.0 license.

808
00:55:48,510 --> 00:55:51,510
Scott: GeekNights is recorded live with no studio and no audience.

809
00:55:51,750 --> 00:55:54,650
Scott: But unlike those other late shows, it's actually recorded at night.

810
00:56:05,830 --> 00:56:19,099
Rym: And the Patreon Dangers for this episode of GeekNights are Craig Oliver, Alan Joyce, Rebecca Dunn, Heidi McNicholas, Shimmer and Rubiablos, Hanging in the Sky, MyStainty.com, Jeremy Miner, Link Iggi, Roberto Kingsley, Kelly Snyder, Cold Guy, Amanda Duchette, Sean Yeager, Matthew Smith, Nicholas Brando, Mr.

811
00:56:19,119 --> 00:56:22,495
Rym: Strong Streshen, 421 Creations, no I never ever wonder why we're here.

812
00:56:22,555 --> 00:56:38,749
Rym: Semper Fi, bitch, Shervin Von Horl, Rory, James David White, Rochelle Montanona, Superboy, Tripwire, Sailor Vista, Don Schleich, Jar Tovjian, Jojo Joestar, Clinton Walton, Ren from New Zealand, Ryan Perrin, Drew Opendlander, Finn, Chris Minkif, Daniel Redman, Sean Klein, Chris Reimer and Thomas Hahn.

